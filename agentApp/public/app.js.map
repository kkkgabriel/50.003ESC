{"version":3,"sources":["app/components/App.jsx","app/initialize.js"],"names":["App","props","rainbowSignIn","user","name","id","bot","state","rainbowSDK","version","visible","messages","author","timestamp","Date","text","addNewMessage","bind","sendToRainbow","toggleDialog","toggleisAvailable","reroute","updateIncomingMessage","onNewMessageReceived","event","console","log","document","addEventListener","im","RAINBOW_ONNEWIMMESSAGERECEIVED","rainbowLogin","rainbowPassword","connection","signin","then","account","catch","err","setState","isAvailable","myResponse","Object","assign","message","prevState","question","theirResponse","margin","textAlign","React","Component","applicationID","applicationSecret","angular","bootstrap","get","onReady","ReactDOM","render","querySelector","onLoaded","initialize","$","on","RAINBOW_ONREADY","RAINBOW_ONLOADED","load"],"mappings":"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","file":"public/app.js","sourcesContent":["import ReactDOM from 'react-dom';\r\nimport React from 'react';\r\nimport { Chat } from '@progress/kendo-react-conversational-ui';\r\nimport { Dialog, DialogActionsBar } from '@progress/kendo-react-dialogs';\r\n\r\nexport default class App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.rainbowSignIn();\r\n        this.user = {\r\n            name:\"gabriel\",\r\n            id: 1,            \r\n        };\r\n        this.bot = {\r\n            name:\"other contact name\",\r\n             id: 0\r\n            };\r\n        this.state = {\r\n            \"version\": rainbowSDK.version(),\r\n            visible:false,\r\n            \"isAvailable\":false,\r\n            messages: [\r\n                {\r\n                    author: this.bot,\r\n                    timestamp: new Date(),\r\n                    text: \"Hello there.\"\r\n                }\r\n            ]\r\n        };\r\n        this.addNewMessage = this.addNewMessage.bind(this);\r\n        this.sendToRainbow= this.sendToRainbow.bind(this);        \r\n        this.toggleDialog = this.toggleDialog.bind(this);\r\n        this.toggleisAvailable = this.toggleisAvailable.bind(this);\r\n        this.reroute = this.reroute.bind(this);\r\n        this.updateIncomingMessage = this.updateIncomingMessage.bind(this);\r\n        this.rainbowSignIn = this.rainbowSignIn.bind(this);\r\n\r\n        let onNewMessageReceived = function(event){\r\n            console.log(\"this works\")\r\n            this.toggleDialog();\r\n            \r\n        }\r\n        document.addEventListener(rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED, onNewMessageReceived)\r\n    }\r\n\r\n\r\n    rainbowSignIn(){\r\n        var rainbowLogin = \"HomeLine@gmail.com\";\r\n        var rainbowPassword = \"Longpassword!1\";\r\n        rainbowSDK.connection.signin(rainbowLogin,rainbowPassword)\r\n        .then(function(account){\r\n            console.log(\"this works!\")\r\n        })\r\n        .catch(function(err){\r\n            console.log(err)\r\n        })\r\n\r\n    }\r\n    reroute(){\r\n        console.log(\"this is rerouting\");\r\n    }\r\n    toggleDialog() {\r\n        this.setState({\r\n            visible: !this.state.visible\r\n        });\r\n    }\r\n    \r\n    toggleisAvailable(){\r\n        this.setState({\r\n            \"isAvailable\": !this.state.isAvailable,\r\n            visible: !this.state.visible\r\n        })\r\n    }\r\n    addNewMessage(event) {\r\n        let myResponse = Object.assign({}, event.message);\r\n        this.setState((prevState) => ({\r\n            messages: [\r\n                ...prevState.messages,\r\n                myResponse\r\n            ]\r\n        }));\r\n        this.sendToRainbow(event.message);\r\n    };\r\n\r\n\r\n    sendToRainbow(question){\r\n        console.log(\"to add in rainbow send message here\")\r\n        \r\n    }\r\n\r\n    updateIncomingMessage(){\r\n        let theirResponse = {\r\n            author: this.bot,\r\n            text: \"update text here\",\r\n            timestamp: new Date()\r\n        }\r\n        this.setState((prevState) => ({\r\n            messages: [\r\n                ...prevState.messages,\r\n                theirResponse\r\n            ]\r\n        }));\r\n\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div>\r\n                <button className=\"k-button\" onClick={this.toggleDialog}>Open Dialog</button>\r\n                {this.state.visible && <Dialog title={\"Please confirm\"} onClose={this.toggleDialog}>\r\n        <p style={{ margin: \"25px\", textAlign: \"center\" }}>{this.user[\"name\"]} is trying to connect to you. Do you want to accept?</p>\r\n                    <DialogActionsBar>\r\n                        <button className=\"k-button\" onClick={this.toggleDialog}>Decline</button>\r\n                        <button className=\"k-button\" onClick={this.toggleisAvailable}>Accept</button>\r\n                    </DialogActionsBar>\r\n                </Dialog>}\r\n            {this.state.isAvailable ? (\r\n                <div>\r\n                <Chat user={this.user}\r\n                    messages={this.state.messages}\r\n                    onMessageSend={this.addNewMessage}\r\n                    placeholder={\"Type a message...\"}\r\n                    width={400}>\r\n                </Chat>\r\n                <button className=\"k-button\" onClick={this.reroute}>Reroute </button>\r\n                <button className=\"k-button\" onClick={this.updateIncomingMessage}> updateIncomingMessage</button>\r\n                </div>\r\n            ): null}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import ReactDOM from 'react-dom';\r\nimport React from 'react';\r\nimport App from 'components/App';\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\n    // do your setup here\r\n    console.log(\"[DEMO] :: Starter-Kit of the Rainbow SDK for Web with React started!\");\r\n  \r\n    var applicationID = \"dcb692b0564b11eabb3887f44e39165a\", \r\n        applicationSecret = \"BrxZMv6ThPI1ZfdSRvpWhj6BZudBtQzI6dxHMmqV6uDEGmwO6WuvSpkfmA64cEhS\";\r\n\r\n    /* Bootstrap the SDK */\r\n    angular.bootstrap(document, [\"sdk\"]).get(\"rainbowSDK\");\r\n\r\n    /* Callback for handling the event 'RAINBOW_ONREADY' */\r\n    var onReady = function onReady() {\r\n        console.log(\"[DEMO] :: On SDK Ready !\");\r\n        // do something when the SDK is ready\r\n        ReactDOM.render(<App />, document.querySelector('#app'));\r\n    };\r\n\r\n    /* Callback for handling the event 'RAINBOW_ONCONNECTIONSTATECHANGED' */\r\n    var onLoaded = function onLoaded() {\r\n        console.log(\"[DEMO] :: On SDK Loaded !\");\r\n\r\n        rainbowSDK.initialize(applicationID, applicationSecret).then(function() {\r\n            console.log(\"[DEMO] :: Rainbow SDK is initialized!\");\r\n        }).catch(function(err) {\r\n            console.log(\"[DEMO] :: Something went wrong with the SDK...\", err);\r\n        });\r\n    };\r\n\r\n    /* Listen to the SDK event RAINBOW_ONREADY */\r\n    $(document).on(rainbowSDK.RAINBOW_ONREADY, onReady);\r\n\r\n    /* Listen to the SDK event RAINBOW_ONLOADED */\r\n    $(document).on(rainbowSDK.RAINBOW_ONLOADED, onLoaded);\r\n\r\n    /* Load the SDK */\r\n    rainbowSDK.load();\r\n\r\n\r\n  \r\n});\r\n"]}
