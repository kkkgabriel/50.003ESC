{"version":3,"sources":["app/components/App.jsx","app/initialize.js"],"names":["App","props","user","name","id","avatarUrl","bot","state","rainbowSDK","version","visible","messages","author","suggestedActions","type","value","timestamp","Date","text","addNewMessage","bind","countReplayLength","toggleDialog","toggleisAvailable","reroute","console","log","setState","isAvailable","event","botResponce","Object","assign","message","prevState","setTimeout","question","length","answer","margin","textAlign","React","Component","document","addEventListener","applicationID","applicationSecret","angular","bootstrap","get","onReady","ReactDOM","render","querySelector","onLoaded","initialize","then","catch","err","$","on","RAINBOW_ONREADY","RAINBOW_ONLOADED","load"],"mappings":"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","file":"public/app.js","sourcesContent":["import ReactDOM from 'react-dom';\r\nimport React from 'react';\r\nimport { Chat } from '@progress/kendo-react-conversational-ui';\r\nimport { Dialog, DialogActionsBar } from '@progress/kendo-react-dialogs';\r\n\r\nexport default class App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.user = {\r\n            name:\"Gabriel\",\r\n            id: 1,\r\n            avatarUrl: \"https://via.placeholder.com/24/008000/008000.png\"\r\n            \r\n        };\r\n        this.bot = { id: 0 };\r\n        this.state = {\r\n            \"version\": rainbowSDK.version(),\r\n            visible:false,\r\n            \"isAvailable\":false,\r\n            messages: [\r\n                {\r\n                    author: this.bot,\r\n                    suggestedActions: [\r\n                        {\r\n                            type: 'reply',\r\n                            value: 'Oh, really?'\r\n                        }, {\r\n                            type: 'reply',\r\n                            value: 'Thanks, but this is boring.'\r\n                        }\r\n                    ],\r\n                    timestamp: new Date(),\r\n                    text: \"Hello, this is a demo bot. I don't do much, but I can count symbols!\"\r\n                }\r\n            ]\r\n        };\r\n        this.addNewMessage = this.addNewMessage.bind(this);\r\n        this.countReplayLength= this.countReplayLength.bind(this);        \r\n        this.toggleDialog = this.toggleDialog.bind(this);\r\n        this.toggleisAvailable = this.toggleisAvailable.bind(this);\r\n        this.reroute = this.reroute.bind(this);\r\n    }\r\n\r\n    reroute(){\r\n        console.log(\"this is rerouting\");\r\n    }\r\n    toggleDialog() {\r\n        this.setState({\r\n            visible: !this.state.visible\r\n        });\r\n    }\r\n    \r\n    toggleisAvailable(){\r\n        this.setState({\r\n            \"isAvailable\": !this.state.isAvailable,\r\n            visible: !this.state.visible\r\n        })\r\n    }\r\n    addNewMessage(event) {\r\n        let botResponce = Object.assign({}, event.message);\r\n        console.log(botResponce)\r\n        console.log(event.message.text)\r\n        this.countReplayLength(event.message.text)\r\n        botResponce.text = this.countReplayLength(event.message.text);\r\n        botResponce.author = this.bot;\r\n        this.setState((prevState) => ({\r\n            messages: [\r\n                ...prevState.messages,\r\n                event.message\r\n            ]\r\n        }));\r\n        setTimeout(() => {\r\n            this.setState(prevState => ({\r\n                messages: [\r\n                    ...prevState.messages,\r\n                    botResponce\r\n                ]\r\n            }));\r\n        }, 1000);\r\n    };\r\n\r\n    countReplayLength(question){\r\n        console.log(\"this works\")\r\n        let length = question.length;\r\n        let answer = question + \" contains exactly \" + length + \" symbols.\";\r\n        return answer;\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div>\r\n                <button className=\"k-button\" onClick={this.toggleDialog}>Open Dialog</button>\r\n                {this.state.visible && <Dialog title={\"Please confirm\"} onClose={this.toggleDialog}>\r\n        <p style={{ margin: \"25px\", textAlign: \"center\" }}>{this.user[\"name\"]} is trying to connect to you. Do you want to accept?</p>\r\n                    <DialogActionsBar>\r\n                        <button className=\"k-button\" onClick={this.toggleDialog}>Decline</button>\r\n                        <button className=\"k-button\" onClick={this.toggleisAvailable}>Accept</button>\r\n                    </DialogActionsBar>\r\n                </Dialog>}\r\n            {this.state.isAvailable ? (\r\n                <div>\r\n                <Chat user={this.user}\r\n                    messages={this.state.messages}\r\n                    onMessageSend={this.addNewMessage}\r\n                    placeholder={\"Type a message...\"}\r\n                    width={400}>\r\n                </Chat>\r\n                <button className=\"k-button\" onClick={this.reroute}>Reroute </button>\r\n                </div>\r\n            ): null}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import ReactDOM from 'react-dom';\r\nimport React from 'react';\r\nimport App from 'components/App';\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\n    // do your setup here\r\n    console.log(\"[DEMO] :: Starter-Kit of the Rainbow SDK for Web with React started!\");\r\n  \r\n    var applicationID = \"dcb692b0564b11eabb3887f44e39165a\", \r\n        applicationSecret = \"BrxZMv6ThPI1ZfdSRvpWhj6BZudBtQzI6dxHMmqV6uDEGmwO6WuvSpkfmA64cEhS\";\r\n\r\n    /* Bootstrap the SDK */\r\n    angular.bootstrap(document, [\"sdk\"]).get(\"rainbowSDK\");\r\n\r\n    /* Callback for handling the event 'RAINBOW_ONREADY' */\r\n    var onReady = function onReady() {\r\n        console.log(\"[DEMO] :: On SDK Ready !\");\r\n        // do something when the SDK is ready\r\n        ReactDOM.render(<App />, document.querySelector('#app'));\r\n    };\r\n\r\n    /* Callback for handling the event 'RAINBOW_ONCONNECTIONSTATECHANGED' */\r\n    var onLoaded = function onLoaded() {\r\n        console.log(\"[DEMO] :: On SDK Loaded !\");\r\n\r\n        rainbowSDK.initialize(applicationID, applicationSecret).then(function() {\r\n            console.log(\"[DEMO] :: Rainbow SDK is initialized!\");\r\n        }).catch(function(err) {\r\n            console.log(\"[DEMO] :: Something went wrong with the SDK...\", err);\r\n        });\r\n    };\r\n\r\n    /* Listen to the SDK event RAINBOW_ONREADY */\r\n    $(document).on(rainbowSDK.RAINBOW_ONREADY, onReady);\r\n\r\n    /* Listen to the SDK event RAINBOW_ONLOADED */\r\n    $(document).on(rainbowSDK.RAINBOW_ONLOADED, onLoaded);\r\n\r\n    /* Load the SDK */\r\n    rainbowSDK.load();\r\n\r\n\r\n  \r\n});\r\n"]}