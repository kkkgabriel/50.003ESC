{"version":3,"sources":["app/components/App.jsx","app/components/Conversations.jsx","app/components/Home/Home.js","app/components/Login/Login.js","app/components/constants.js","app/initialize.js"],"names":["App","console","log","rainbowSDK","Login","Home","React","Component","Conversations","props","user","name","id","bot","state","version","conversations","conversation","visible","messages","author","timestamp","Date","text","login","conversationsChangedHandler","bind","addNewMessage","sendToRainbow","toggleDialog","toggleisAvailable","reroute","updateIncomingMessage","document","addEventListener","RAINBOW_ONCONVERSATIONSCHANGED","findNewConversation","setState","isAvailable","event","myResponse","Object","assign","message","prevState","question","theirResponse","i","length","l","data","alert","contact","loginEmail","myRainbowLogin","myRainbowPassword","that","connection","signin","then","getAllConversations","catch","err","margin","textAlign","consts","updateRainbowMessages","changeBot","msg","im","sendMessageToConversation","lastMessage","side","lastMessageText","START_KEYWORD","value","error","username","password","loginHandler","account","history","push","onInputChange","stateKey","target","appId","appSecret","angular","bootstrap","get","onReady","ReactDOM","render","querySelector","onLoaded","initialize","$","on","RAINBOW_ONREADY","RAINBOW_ONLOADED","load"],"mappings":"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","file":"public/app.js","sourcesContent":["import React from 'react';\r\nimport Login from './Login/Login'\r\nimport Home from './Home/Home'\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\r\n\r\nexport default class App extends React.Component {\r\n    render() {\r\n        console.log(rainbowSDK)\r\n        return (\r\n            <div>\r\n                <BrowserRouter>\r\n                    <Switch>\r\n                        <Route path=\"/\" exact component={Login}/>\r\n                        <Route path=\"/home\" exact component={Home}/>\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import ReactDOM from 'react-dom';\r\nimport React from 'react';\r\nimport Login from './Login/Login'\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\r\nimport { Chat } from '@progress/kendo-react-conversational-ui';\r\nimport { Dialog, DialogActionsBar } from '@progress/kendo-react-dialogs';\r\n\r\n\r\nclass Conversations extends Component {\r\n\r\n    constructor (props) {\r\n        super(props);\r\n        this.user = {\r\n            name:\"gabriel\",\r\n            id: 1,            \r\n        };\r\n        this.bot = {\r\n            name:\"other contact name\",\r\n             id: 0\r\n            };\r\n\r\n        this.state = {\r\n            version: rainbowSDK.version(),\r\n            conversations: [],\r\n            conversation: {},\r\n            visible:false,\r\n            \"isAvailable\":false,\r\n            messages: [\r\n                {\r\n                    author: this.bot,\r\n                    timestamp: new Date(),\r\n                    text: \"Hello there.\"\r\n                }\r\n            ]\r\n\r\n        }\r\n\r\n        this.login();\r\n        this.conversationsChangedHandler = this.conversationsChangedHandler.bind(this);\r\n        this.addNewMessage = this.addNewMessage.bind(this);\r\n        this.sendToRainbow= this.sendToRainbow.bind(this);        \r\n        this.toggleDialog = this.toggleDialog.bind(this);\r\n        this.toggleisAvailable = this.toggleisAvailable.bind(this);\r\n        this.reroute = this.reroute.bind(this);\r\n        this.updateIncomingMessage = this.updateIncomingMessage.bind(this);\r\n\r\n        document.addEventListener(\r\n            rainbowSDK.conversations.RAINBOW_ONCONVERSATIONSCHANGED,\r\n            this.conversationsChangedHandler\r\n        );\r\n    }\r\n\r\n    conversationsChangedHandler(){\r\n        console.log(\"conversationsChangedHandler triggered\"); \r\n        // console.log(this); \r\n        // console.log(this.state); \r\n        // console.log(this.state.conversations);\r\n\r\n        var conversations = this.state.conversations;\r\n        var conversation = this.findNewConversation(conversations);\r\n\r\n        this.setState({\r\n            conversation: conversation\r\n        });\r\n    }\r\n    reroute(){\r\n        console.log(\"this is rerouting\");\r\n    }\r\n    toggleDialog() {\r\n        this.setState({\r\n            visible: !this.state.visible\r\n        });\r\n    }\r\n    \r\n    toggleisAvailable(){\r\n        this.setState({\r\n            \"isAvailable\": !this.state.isAvailable,\r\n            visible: !this.state.visible\r\n        })\r\n    }\r\n    addNewMessage(event) {\r\n        let myResponse = Object.assign({}, event.message);\r\n        this.setState((prevState) => ({\r\n            messages: [\r\n                ...prevState.messages,\r\n                myResponse\r\n            ]\r\n        }));\r\n        this.sendToRainbow(event.message);\r\n    };\r\n\r\n\r\n    sendToRainbow(question){\r\n        console.log(\"to add in rainbow send message here\")\r\n        \r\n    }\r\n\r\n    updateIncomingMessage(){\r\n        let theirResponse = {\r\n            author: this.bot,\r\n            text: \"update text here\",\r\n            timestamp: new Date()\r\n        }\r\n        this.setState((prevState) => ({\r\n            messages: [\r\n                ...prevState.messages,\r\n                theirResponse\r\n            ]\r\n        }))\r\n    }\r\n\r\n    findNewConversation(conversations){\r\n        var i = 0;\r\n        while (i < conversations.length ){\r\n            var l = conversations[i].messages.length;\r\n            if ( conversations[i].messages[l-1].data == \"start\" ){\r\n                console.log(\"start found\");\r\n                alert(conversations[i].contact.loginEmail+\" wants to talk to you\");\r\n                return conversations[i];\r\n            }\r\n            i++;\r\n        }\r\n        return ['conversations are the same'];\r\n    }\r\n\r\n    login(){\r\n        console.log(\"I m here\");\r\n        var myRainbowLogin = \"AccountsNBills@gmail.com\";\r\n        var myRainbowPassword = \"Longpassword!1\";\r\n        // var strId = \"5e52a877b4528b74a00c92df\";\r\n        let that = this;\r\n        rainbowSDK.connection.signin(myRainbowLogin, myRainbowPassword)\r\n        .then(function(){\r\n            console.log(\"sign in successful\");\r\n            var conversations = rainbowSDK.conversations.getAllConversations();\r\n            // console.log(conversations);\r\n\r\n            that.setState({\r\n                conversations: conversations\r\n            }, function(){\r\n                console.log(\"this is the callback\");\r\n                console.log(that);\r\n            });\r\n            console.log(that.state.conversations);\r\n        })\r\n        .catch(function(err){\r\n            console.log(\"sign in failed\");\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <button className=\"k-button\" onClick={this.toggleDialog}>Open Dialog</button>\r\n                {this.state.visible && <Dialog title={\"Please confirm\"} onClose={this.toggleDialog}>\r\n                <p style={{ margin: \"25px\", textAlign: \"center\" }}>{this.user[\"name\"]} is trying to connect to you. Do you want to accept?</p>\r\n                    <DialogActionsBar>\r\n                        <button className=\"k-button\" onClick={this.toggleDialog}>Decline</button>\r\n                        <button className=\"k-button\" onClick={this.toggleisAvailable}>Accept</button>\r\n                    </DialogActionsBar>\r\n                </Dialog>}\r\n            {this.state.isAvailable ? (\r\n                <div>\r\n                <Chat user={this.user}\r\n                    messages={this.state.messages}\r\n                    onMessageSend={this.addNewMessage}\r\n                    placeholder={\"Type a message...\"}\r\n                    width={400}>\r\n                </Chat>\r\n                <button className=\"k-button\" onClick={this.reroute}>Reroute </button>\r\n                <button className=\"k-button\" onClick={this.updateIncomingMessage}> updateIncomingMessage</button>\r\n                </div>\r\n            ): null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Conversations;","import React, {Component} from 'react';\r\nimport { Chat } from '@progress/kendo-react-conversational-ui';\r\nimport { Dialog, DialogActionsBar } from '@progress/kendo-react-dialogs';\r\nimport * as consts from '../constants.js';\r\n\r\nclass Home extends Component {\r\n\r\n    constructor (props) {\r\n        super(props);\r\n        this.user = {\r\n            name:\"gabriel\",\r\n            id: 1,            \r\n        };\r\n        this.bot = {\r\n            name:\"other contact name\",\r\n             id: 0\r\n            };\r\n\r\n        this.state = {\r\n            version: rainbowSDK.version(),\r\n            conversations: [],\r\n            conversation: {},\r\n            visible:false,\r\n            \"isAvailable\":false,\r\n            messages: [\t\t// for population of kendo\r\n                {\r\n                    author: this.bot,\r\n                    timestamp: new Date(),\r\n                    text: \"Hello there.\"\r\n                }\r\n            ]\r\n\r\n        }\r\n\t\t\r\n        this.conversationsChangedHandler = this.conversationsChangedHandler.bind(this);\r\n        this.login();\r\n        this.addNewMessage = this.addNewMessage.bind(this);\r\n        this.sendToRainbow= this.sendToRainbow.bind(this);        \r\n        this.toggleDialog = this.toggleDialog.bind(this);\r\n        this.toggleisAvailable = this.toggleisAvailable.bind(this);\r\n        this.reroute = this.reroute.bind(this);\r\n        this.updateIncomingMessage = this.updateIncomingMessage.bind(this);\r\n\t\tthis.updateRainbowMessages = this.updateRainbowMessages.bind(this);\r\n\t\tthis.changeBot = this.changeBot.bind(this);\r\n\r\n    }\r\n\r\n    conversationsChangedHandler(){\r\n        console.log(\"conversationsChangedHandler triggered\");\r\n        // console.log(this.state.conversations);\r\n        var conversations = this.state.conversations;\r\n\t\tif ( this.state.isAvailable ) {\r\n\t\t\tthis.updateRainbowMessages();\r\n\t\t} else {\r\n\t\t\tthis.findNewConversation();\r\n\t\t}\r\n    }\r\n    reroute(){\r\n        console.log(\"this is rerouting\");\r\n    }\r\n\r\n    toggleDialog() {\r\n\t\tconsole.log(\"toggling dialog\");\r\n        this.setState({\r\n            visible: !this.state.visible\r\n        });\r\n    }\r\n    \r\n    toggleisAvailable(){\r\n        this.setState({\r\n            \"isAvailable\": !this.state.isAvailable,\r\n            visible: !this.state.visible\r\n        })\r\n    }\r\n\r\n    addNewMessage(event) {\r\n        let myResponse = Object.assign({}, event.message);\r\n        this.setState((prevState) => ({\r\n            messages: [\r\n                ...prevState.messages,\r\n                myResponse\r\n            ]\r\n        }));\r\n        this.sendToRainbow(event.message);\r\n    };\r\n\r\n    sendToRainbow(msg){\r\n        // console.log(\"to add in rainbow send message here\")\r\n        console.log(msg);\r\n\t\trainbowSDK.im.sendMessageToConversation(this.state.conversation, msg.text);\r\n    }\r\n\r\n    updateIncomingMessage(){\r\n        let theirResponse = {\r\n            author: this.user,\r\n            text: \"update text here\",\r\n            timestamp: new Date()\r\n        }\r\n        this.setState((prevState) => ({\r\n            messages: [\r\n                ...prevState.messages,\r\n                theirResponse\r\n            ]\r\n        }))\r\n    }\r\n\r\n\tupdateRainbowMessages(){\t// display messages from rainbow conversation onto the kendo chat element\r\n\t\tlet lastMessage = this.state.conversation.messages[this.state.conversation.messages.length-1];\r\n\t\t// console.log(lastMessage.side);\r\n\t\tif ( lastMessage.side == \"L\" ){\t// for rainbow, incoming messages are displayed on the left\r\n\t\t\tlet theirResponse = {\r\n\t\t\t\tauthor: this.state.conversation.contact.loginEmail,\r\n\t\t\t\ttext: this.state.conversation.lastMessageText,\r\n\t\t\t\ttimestamp: new Date()\r\n\t\t\t}\r\n\t\t\tthis.setState((prevState) => ({\r\n\t\t\t\tmessages: [\r\n\t\t\t\t\t...prevState.messages,\r\n\t\t\t\t\ttheirResponse\r\n\t\t\t\t]\r\n\t\t\t}))\r\n\t\t}\r\n\t}\r\n\r\n\tchangeBot(name){\r\n\t\tthis.bot.name = name;\r\n\t}\r\n\r\n    findNewConversation(){\r\n\t\tlet conversations = this.state.conversations;\r\n        var i = 0;\r\n        while (i < conversations.length ){\r\n            try {\r\n                if ( conversations[i].lastMessageText == consts.START_KEYWORD ){\r\n\r\n\t\t\t\t\t//let lm = conversations[i].messages[conversations[i].messages.length-1];\r\n                    console.log(\"start found\");\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tconversation: conversations[i]\r\n\t\t\t\t\t});\r\n                    this.toggleDialog();\r\n\t\t\t\t\tthis.changeBot(conversations[i].name.value);\r\n\t\t\t\t\tthis.updateRainbowMessages();\t// display messages from rainbow conversation onto the kendo chat element\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t// i = conversations.length;\t// break the loop\r\n                }\r\n            } catch (error) {\r\n                // console.log(error);\r\n            }\r\n            i++;\r\n        }\r\n        return [];\t// return empty conversation\r\n    }\r\n\r\n\r\n    login(){\r\n        console.log(\"I m here\");\r\n        var myRainbowLogin = \"AccountsNBills@gmail.com\";\r\n        var myRainbowPassword = \"Longpassword!1\";\r\n        // var strId = \"5e52a877b4528b74a00c92df\";\r\n        let that = this;\r\n        rainbowSDK.connection.signin(myRainbowLogin, myRainbowPassword)\r\n        .then(function(){\r\n            console.log(\"sign in successful\");\r\n            var conversations = rainbowSDK.conversations.getAllConversations();\r\n            // console.log(conversations);\r\n\r\n            that.setState({\r\n                conversations: conversations\r\n            }, function(){\r\n                // console.log(\"this is the callback\");\r\n                // console.log(that);\r\n\t\t\t\tdocument.addEventListener(\r\n\t\t\t\t\trainbowSDK.conversations.RAINBOW_ONCONVERSATIONSCHANGED,\r\n\t\t\t\t\tthis.conversationsChangedHandler\r\n\t\t\t\t);\r\n            });\r\n            console.log(that.state.conversations);\r\n        })\r\n        .catch(function(err){\r\n            console.log(\"sign in failed\");\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <button className=\"k-button\" onClick={this.toggleDialog}>Open Dialog</button>\r\n                {this.state.visible && \r\n                <Dialog title={\"Please confirm\"} onClose={this.toggleDialog}>\r\n                    <p style={{ margin: \"25px\", textAlign: \"center\" }}>{this.bot[\"name\"]} is trying to connect to you. Do you want to accept?</p>\r\n                    <DialogActionsBar>\r\n                        <button className=\"k-button\" onClick={this.toggleDialog}>Decline</button>\r\n                        <button className=\"k-button\" onClick={this.toggleisAvailable}>Accept</button>\r\n                    </DialogActionsBar>\r\n                </Dialog>}\r\n            {this.state.isAvailable ? (\r\n                <div>\r\n                <Chat user={this.user}\r\n                    messages={this.state.messages}\r\n                    onMessageSend={this.addNewMessage}\r\n                    placeholder={\"Type a message...\"}\r\n                    width={400}>\r\n                </Chat>\r\n                <button className=\"k-button\" onClick={this.reroute}>Reroute </button>\r\n                <button className=\"k-button\" onClick={this.updateIncomingMessage}> updateIncomingMessage</button>\r\n                </div>\r\n            ): null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react'\r\nimport {withRouter} from 'react-router-dom'\r\n// import axios from 'axios'\r\n// import { Form, Field } from '@progress/kendo-react-form';\r\n// import { Input } from '@progress/kendo-react-inputs';\r\nclass Login extends Component{\r\n    state = {\r\n        username: '',\r\n        password: ''\r\n    }\r\n    loginHandler = () => {\r\n        console.log(this.state)\r\n        // var rainbowLogin = \"mario.kosasih@gmail.com\"\r\n        // var rainbowPassword = \"6OCJc97dWp*2\"\r\n        rainbowSDK.connection.signin(this.state.username, this.state.password)\r\n            .then(account => {\r\n                console.log(\"Successful Login\")\r\n                console.log(account)\r\n                // route to agent page\r\n                console.log(this.props)\r\n                this.props.history.push('/home')\r\n            })\r\n            .catch(err => {\r\n                console.log(\"failed to login\")\r\n            })\r\n    }\r\n\r\n    onInputChange = (event, stateKey)=>{\r\n        let login = {...this.state}\r\n        login[stateKey] = event.target.value\r\n        this.setState(login)\r\n    }\r\n    render() {\r\n        console.log(rainbowSDK)\r\n        return (\r\n        <div>\r\n            <input type=\"text\" value={this.state.username} onChange={(event)=>this.onInputChange(event,'username')}/>\r\n            <input type=\"text\" value={this.state.password} onChange={(event)=>this.onInputChange(event, 'password')}/>\r\n            <button onClick={this.loginHandler}>Login</button>\r\n        </div>\r\n    )}\r\n}\r\n\r\nexport default withRouter(Login)","export const START_KEYWORD = \"start\";","import ReactDOM from 'react-dom';\r\nimport React from 'react';\r\nimport App from 'components/App';\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\n    // do your setup here\r\n    console.log(\"[DEMO] :: Starter-Kit of the Rainbow SDK for Web with React started!\");\r\n  \r\n    var appId = \"dcb692b0564b11eabb3887f44e39165a\";\r\n    var appSecret = \"BrxZMv6ThPI1ZfdSRvpWhj6BZudBtQzI6dxHMmqV6uDEGmwO6WuvSpkfmA64cEhS\";\r\n\r\n    /* Bootstrap the SDK */\r\n    angular.bootstrap(document, [\"sdk\"]).get(\"rainbowSDK\");\r\n    console.log(angular)\r\n    /* Callback for handling the event 'RAINBOW_ONREADY' */\r\n    var onReady = function onReady() {\r\n        console.log(\"[DEMO] :: On SDK Ready !\");\r\n        // do something when the SDK is ready\r\n        ReactDOM.render(<App />, document.querySelector('#app'));\r\n    };\r\n\r\n    /* Callback for handling the event 'RAINBOW_ONCONNECTIONSTATECHANGED' */\r\n    var onLoaded = function onLoaded() {\r\n        console.log(\"[DEMO] :: On SDK Loaded !\");\r\n\r\n        rainbowSDK.initialize(appId, appSecret).then(function() {\r\n            console.log(\"[DEMO] :: Rainbow SDK is initialized!\");\r\n        }).catch(function(err) {\r\n            console.log(\"[DEMO] :: Something went wrong with the SDK...\", err);\r\n        });\r\n    };\r\n\r\n    /* Listen to the SDK event RAINBOW_ONREADY */\r\n    $(document).on(rainbowSDK.RAINBOW_ONREADY, onReady);\r\n\r\n    /* Listen to the SDK event RAINBOW_ONLOADED */\r\n    $(document).on(rainbowSDK.RAINBOW_ONLOADED, onLoaded);\r\n\r\n    /* Load the SDK */\r\n    rainbowSDK.load();\r\n});\r\n\r\n\r\n"]}